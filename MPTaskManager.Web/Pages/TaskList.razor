@page "/tasks"
@using MPTaskManager.Api.DTOs
@using MPTaskManager.Web.Services
@using MPTaskManager.Web.Components
@using MPTaskManager.Web.DTOs
@inject TaskService TaskService

<h3 class="text-dark">Lista de Tarefas</h3>
@if (_isLoading)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Carregando...</span>
        </div>
        <p>Carregando tarefas...</p>
    </div>
}
else
{
    <div class="mb-3">
        <button class="btn btn-success" @onclick="OpenCreateModal">
            <i class="bi bi-plus-circle"></i> Nova Tarefa
        </button>
    </div>
    
    <div class="mb-3">
        <label for="itemsPerPage">Itens por página:</label>
        <select id="itemsPerPage" class="form-select d-inline-block" style="width: auto;" @onchange="OnItemsPerPageChanged" value="@_itemsPerPage">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="20">20</option>
        </select>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger">@_errorMessage</div>
    }
    else if (!_tasks.Any())
    {
        <p>Nenhuma tarefa encontrada!</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Título</th>
                <th>Descrição</th>
                <th>Data</th>
                <th>Concluída</th>
                <th class="text-md-center">Ações</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var t in TasksPaged)
            {
                <tr class="itens-description">
                    <td>@t.Title</td>
                    <td class="table-cell-scroll">
                        <div class="scroll-content">
                            @t.Description
                        </div>
                    </td>
                    <td>@t.DueDate.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@(t.IsDone ? "Sim" : "Não")</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => OpenEditModal(t.Id)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteModal(t.Id, t.Title)">Excluir</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
        <div class="d-flex justify-content-between align-items-center">
            <button class="btn btn-outline-secondary" @onclick="GoToPreviousPage" disabled="@(_currentPage == 1)">Anterior</button>
            <span>Página @_currentPage de @_totalPages</span>
            <button class="btn btn-outline-secondary" @onclick="GoToNextPage" disabled="@(_currentPage == _totalPages)">Próxima</button>
        </div>
    }
}

@if (_showModal)
{
    <EditTaskModal Title="Editar Tarefa"
                   Model="_model"
                   OnSave="SaveUpdateTask"
                   OnClose="CloseModal"/>
}

@if (_showCreateModal)
{
    <CreateTaskModal Model="_createModel"
                     OnSave="SaveCreateTask"
                     OnClose="CloseModal"/>
}
@if (_showDeleteModal)
{
    <DeleteTaskModal Task="_tasks.FirstOrDefault(t => t.Id == _taskToDeleteId)"
                     OnDelete="ConfirmDeleteTask"
                     OnClose="CloseModal"/>
}

@code {
    private bool _isLoading = true;
    private PagedResultDTO<TaskItemResponseDTO>? _pagedResult;
    private IEnumerable<TaskItemResponseDTO> TasksPaged => _pagedResult?.Items ?? new List<TaskItemResponseDTO>();
    private IEnumerable<TaskItemResponseDTO> _tasks = new List<TaskItemResponseDTO>();
    private string? _errorMessage;
    private TaskItemUpdateRequestDTO _model = new();
    private TaskItemCreateRequestDTO _createModel = new();
    private bool _showCreateModal = false;
    private bool _showModal = false;
    private bool _showDeleteModal = false;
    private int _taskToDeleteId;
    private string? _taskToDeleteTitle;
    private int _currentPage = 1;
    private int _itemsPerPage = 5; // Alinhado com o select
    private int _totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        _isLoading = true;
        _errorMessage = null;
        try
        {
            _pagedResult = await TaskService.GetAllTasksPagedAsync(_currentPage, _itemsPerPage);

            if (_pagedResult != null)
            {
                Console.WriteLine($"Página Atual: {_pagedResult.Page}, Tarefas Retornadas: {_pagedResult.Items.Count}, TotalCount: {_pagedResult.TotalCount}");
                _totalPages = (int)Math.Ceiling((double)_pagedResult.TotalCount / _pagedResult.PageSize);
                _tasks = _pagedResult.Items; // Atualiza a lista de tarefas
            }
            else
            {
                Console.WriteLine("PagedResult é nulo.");
                _errorMessage = "Nenhuma tarefa foi carregada.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar as tarefas: {ex.Message}");
            _errorMessage = "Erro ao carregar as tarefas.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OnItemsPerPageChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            _itemsPerPage = newPageSize;
            _currentPage = 1; // Resetar para a primeira página
            await LoadTasks(); // Recarregar as tarefas com o novo tamanho de página
        }
        else
        {
            Console.WriteLine("Valor inválido para itens por página.");
        }
    }

    private void OpenCreateModal()
    {
        Console.WriteLine("Abrindo modal de criação");

        _createModel = new TaskItemCreateRequestDTO
        {
            Title = string.Empty,
            Description = string.Empty,
            DueDate = DateTime.Now.AddDays(1) // Define o valor inicial como 1 dia após o momento atual
        };
        _showCreateModal = true;
    }

    private async Task OpenEditModal(int id)
    {
        try
        {
            var existing = await TaskService.GetTaskByIdAsync(id);
            if (existing != null)
            {
                _model = new TaskItemUpdateRequestDTO
                {
                    Id = id,
                    Title = existing.Title,
                    Description = existing.Description,
                    DueDate = existing.DueDate,
                    IsDone = existing.IsDone
                };
                _showModal = true;
            }
            else
            {
                _errorMessage = "Tarefa não encontrada.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Erro ao carregar a tarefa. Tente novamente mais tarde.";
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }

    private async Task SaveUpdateTask(TaskItemUpdateRequestDTO updatedTask)
    {
        try
        {
            await TaskService.UpdateTaskAsync(updatedTask.Id, updatedTask);
            await LoadTasks();
            _showModal = false; // Fecha o modal após salvar
        }
        catch (Exception ex)
        {
            _errorMessage = "Erro ao atualizar a tarefa. Tente novamente mais tarde.";
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }

    private async Task SaveCreateTask(TaskItemCreateRequestDTO newTask)
    {
        try
        {
            await TaskService.CreateTaskAsync(newTask);
            await LoadTasks();
            _showCreateModal = false; // Fecha o modal após salvar
        }
        catch (Exception ex)
        {
            _errorMessage = "Erro ao criar a tarefa. Tente novamente mais tarde.";
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }

    private void CloseModal()
    {
        // Verifica qual modal está aberta e fecha
        if (_showModal)
        {
            _showModal = false;
        }
        else if (_showCreateModal)
        {
            _showCreateModal = false;
        }
        else
        {
            _showDeleteModal = false;
        }
    }

    private void OpenDeleteModal(int id, string title)
    {
        _taskToDeleteId = id;
        _taskToDeleteTitle = title;
        _showDeleteModal = true;
    }

    private async Task ConfirmDeleteTask(TaskItemResponseDTO task)
    {
        try
        {
            await TaskService.DeleteTaskAsync(task.Id);
            await LoadTasks();
            CloseModal();
        }
        catch (Exception ex)
        {
            _errorMessage = "Erro ao excluir a tarefa. Tente novamente mais tarde.";
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }

    private async Task GoToPreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadTasks(); // Recarrega as tarefas para a página anterior
        }
    }

    private async Task GoToNextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadTasks(); // Recarrega as tarefas para a próxima página
        }
    }
}
